#! /bin/bash

declare -r srcdir=$1
shift

. ${srcdir}functions

eval set -- `getopt -l only-proxy::,refresh,batch '' "$@"` || exit $?

do_refresh=false
only_proxy=false
proxy_dir=
while true; do
    case $1 in
      --)
	    shift
	    break 2
	    ;;

      --batch)
	    ELITO_SETUP_BATCH=y
	    ;;

      --refresh)
	    do_refresh=true
	    ;;

      --only-proxy)
	    only_proxy=true
	    proxy_dir=$2
	    shift
	    ;;

      *)
	    panic "bad option '$1'"
	    ;;
    esac

    shift
done

declare -r instdir=$1
declare -r module=${2:-demo}
declare -r branch=${3:-master}

: ${ELITO_GITHOST:=git.sigma-chemnitz.de:443}

if tty >/dev/null; then
    COL_SUCCESS=`echo -en '\\033[0;32m'`
    COL_FAILURE=`echo -en '\\033[0;31m'`
    COL_WARNING=`echo -en '\\033[0;33m'`
    COL_NORMAL=`echo -en '\\033[0;39m'`
    COL_BOLD=`echo -en '\\033[1m'`
    COL_NOTE=`echo -en '\\033[0;36m'`
else
    COL_SUCCESS=
    COL_FAILURE=
    COL_WARNING=
    COL_NORMAL=
fi

clean_files=
clean_dirs=

cleanup_failure() {
    section_start "Cleaning up (failure):"
    rm -f "${clean_files[@]}"
    rm -rf "${clean_dirs[@]}"
    section_end
}

add_cleanup_files() {
    local i
    local d=`pwd`
    for i; do
	case $i in
	  (/*)	;;
	  (*)	i=$d/$i;;
	esac

	clean_files=( "${clean_files[@]}" "$i" )
    done
}

add_cleanup_dirs() {
    local i
    local d=`pwd`
    for i; do
	case $i in
	  (/*)	;;
	  (*)	i=$d/$i;;
	esac

	clean_dirs=( "${clean_dirs[@]}" "$i" )
    done
}

build_sigma_ssl_client() {
    set -ex
    export LANG=C

    cd ${srcdir}
    ${BUNZIP2} -d -c < packages/sigma-ssl-*.tar.bz2 | ${TAR} xf -
    add_cleanup_dirs sigma-ssl-*
    cd sigma-ssl-*
    ${MAKE} -e ssl-client CC=${GCC}
    ${INSTALL} -D -p -m 0755 ssl-client "${SIGMA_SSL_CLIENT}"
}

fetch_repository() {
    set -ex
    cd ${ELITO_TOPDIR}
    . .config
    export ELITO_CRT

    ${GIT} init || :
    add_cleanup_dirs .git

    ${GIT} remote add sigma git://${ELITO_GITHOST}/${ELITO_PROJECT_ID}.git || :
    ${GIT} config --add remote.sigma.fetch 'refs/tags/*:refs/tags/*'
    ${GIT} remote update || return 1
    ${GIT} checkout --track -b "${branch}" "sigma/${branch}"
}

do_it() {
  rm -f .build.log
  if ! ( "$@" 2> .build.log >&2 ); then
      msg_warning " failed"
      ${SED} "s!^!${I}  **** !" < .build.log
      return 1
  else
      msg_success " ok"
  fi
}

is_dir_empty() {
    local f=`ls -A "$1"`
    test -n "$f" && return 1 || return 0
}

trap "cleanup_failure" EXIT

section_start "Core programs:"
test_prog TAR tar
test_prog GZIP gzip
test_prog BUNZIP2 bunzip2
test_prog CPIO cpio
test_prog SED sed
test_prog GREP grep
test_prog GCC gcc
test_prog MAKE make
test_prog INSTALL install
test_prog LDCONFIG ldconfig
test_prog PKG_CONFIG pkg-config
test_prog SOCAT socat
test_prog GIT git
test_prog AUTOCONF autoconf
test_prog LIBTOOLIZE libtoolize
test_prog AUTORECONF autoreconf
test_prog PYTHON python
test_prog NC nc false
if test x"$NC" != xfalse; then
    msg_checking '+whether this is the BSD version of nc...'
    if $NC -h 2>&1 | grep -q -- '-X proxy'; then
	msg_success " yes"
    else
	msg_warning " no"
	NC=false
    fi
fi
test_prog WGET wget false
section_end

############################

section_start "Libraries:"

HAVE_LIBPROXY=false
msg_checking "for libproxy..."
if ! ${LDCONFIG} -p 2>/dev/null | grep -q '\<libproxy\.so'; then
    msg_warning " no"
else
    msg_success " yes"

    subsection_start
    test_prog PROXY proxy ''
    if test -n "$PROXY"; then
	msg_checking "whether $PROXY is usable..."
	case `${PROXY} -- 2>/dev/null </dev/null` in
	  direct:*|http:*)  HAVE_LIBPROXY=true;;
	  *) ;;
	esac
	$HAVE_LIBPROXY && msg_success " yes" || msg_warning " no"
    fi
    subsection_end
fi

if ! $HAVE_LIBPROXY; then
    msg_note "*** WARNING: download will not work when you are setting   ***"
    msg_note "*** WARNING: behind a proxy. Install libproxy development  ***"
    msg_note "*** WARNING: files and utilitiesto enable proxy detection! ***"
fi

section_end

####

section_start "General questions:"
ask_user ELITO_TOPDIR "Where to install ELiTo" "$instdir"

if ! $only_proxy || test -n "$ELITO_TOPDIR"; then
    if ! mkdir -p "$ELITO_TOPDIR"; then
	panic "could not create '$ELITO_TOPDIR'"
    fi

    if ! is_dir_empty "$ELITO_TOPDIR"; then
	msg_warning "directory '$ELITO_TOPDIR' not empty; it might to be removed when next steps fail"
    fi

    ELITO_TOPDIR=`cd "$ELITO_TOPDIR" && pwd -P`
fi

section_end

bindir=$proxy_dir
: ${bindir:=${ELITO_TOPDIR}/.bin}

PATH=$PATH:$bindir

####

section_start "Proxy traversal/remote setup:"
test_prog SIGMA_SSL_CLIENT sigma-ssl-client ''
if test -z "$SIGMA_SSL_CLIENT" || $do_refresh; then
    : ${SIGMA_SSL_CLIENT:=$bindir/sigma-ssl-client}

    subsection_start "Building sigma-ssl-client:"
    test_pkg GNUTLS gnutls
    msg_action "building sigma-ssl-client..."
    do_it build_sigma_ssl_client
    subsection_end
fi

## TODO: remove legacy support after 2018-01-01
_f_legacy=.elito.pem
_f=.config/elito/customer.pem
if ! test -e "${HOME}/$_f" && test -e "${HOME}/$_f_legacy"; then
    _f=${_f_legacy}
fi

ask_user ELITO_CRT "location of ELiTo certificate" "\${HOME}/$_f"
if ! eval test -e "$ELITO_CRT"; then
    cat <<EOF | ${SED} "s!^!${I}  **** !" >&2
Can not find ELiTo certificate '$ELITO_CRT'.
It is very likely that downloading git repositories will fail.
EOF
fi

test_prog ELITO_PROXY elito-proxy ''
if test -z "$ELITO_PROXY" || $do_refresh; then
    : ${ELITO_PROXY:=$bindir/elito-proxy}

    msg_action "+creating ${ELITO_PROXY}..."
    _d="`dirname ${ELITO_PROXY}`"

    test -d "$_d" || add_cleanup_dirs "$_d"
    mkdir -p "$_d"

    rm -f ${ELITO_PROXY}
    ${SED} \
	-e "s!@SOCAT@!${SOCAT}!g" \
	-e "s!@ELITO_CRT@!${ELITO_CRT}!g" \
	-e "s!@PROXY@!${PROXY}!g" \
	-e "s!@HAVE_LIBPROXY@!${HAVE_LIBPROXY}!g" \
	-e "s!@SIGMA_SSL_CLIENT@!${SIGMA_SSL_CLIENT}!g" \
	< ${srcdir}elito-proxy.tmpl \
	> "${ELITO_PROXY}"
    add_cleanup_files "${ELITO_PROXY}"
    chmod 0755 "${ELITO_PROXY}"
    msg_success " done"
fi

msg_action "registering elito-proxy in git... "
if ! ${GIT} config --global --get-all core.gitProxy "for $ELITO_GITHOST" | \
    ${GREP} -q 'for '; then
    ${GIT} config --global --add 'core.gitProxy' "$ELITO_PROXY for $ELITO_GITHOST"
    msg_success "done"
elif $do_refresh; then
    ${GIT} config --global --replace-all 'core.gitProxy' "$ELITO_PROXY for $ELITO_GITHOST" "for $ELITO_GITHOST"
    msg_success "done (refreshed)"
else
    msg_success "skipping" " (already registered)"
fi

ask_user ELITO_PROJECT_ID "project repository" "$module"

section_end

######

if ! $only_proxy || test -e "${ELITO_TOPDIR}"/.config; then
    rm -f "${ELITO_TOPDIR}"/.config
    cat >"${ELITO_TOPDIR}"/.config <<EOF
ELITO_CRT=${ELITO_CRT}
ELITO_PROG_SSL_CLIENT=${SIGMA_SSL_CLIENT}
ELITO_GITHOST=${ELITO_GITHOST}
ELITO_PROG_PROXY=${PROXY}
ELITO_USE_LIBPROXY=${HAVE_LIBPROXY}
export ELITO_CRT
export ELITO_USE_LIBPROXY ELITO_PROG_PROXY
export ELITO_PROG_SSL_CLIENT
export ELITO_GITHOST

AUTORECONF=${AUTORECONF}
EOF
    add_cleanup_files "${ELITO_TOPDIR}"/.config
fi

if ! $only_proxy; then
    msg_action "checking out project repository... "
    do_it fetch_repository

    msg_action "downloading project data (this will take some time)... "
    msg_success ""
    if ${MAKE} -s -e -C ${ELITO_TOPDIR} prepare; then
	cat <<EOF
*******************************************
Project has been downloaded; now go to ${ELITO_TOPDIR}, set parameters
in .config-<domain> or .config-<hostname> and execute

  make configure M=<project>
  make build M=<project>

 there.
*******************************************
EOF
    else
	tail -n10 .build.log >&2
	cat <<EOF | ${SED} "s!^!${I}  **** !" >&2

Automatic download failed; details can be found in .build.log.
Please execute

  ${MAKE} -C ${ELITO_TOPDIR} prepare

after fixing the problems.
EOF
    fi
fi

trap EXIT
