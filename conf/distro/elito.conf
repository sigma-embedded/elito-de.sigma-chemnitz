#-----------------------------------------------------------------------------
#@TYPE: Distribution
#@NAME: Minimal
#@DESCRIPTION: Embedded Linux Distribution Configuration (minimal)
#
#@COMMENT: This distribution configuration serves as a starting point for
#@COMMENT: the integration of new target platforms, machines, or distributions.
#@COMMENT: It bases on conservative settings and should always be buildable.
#-----------------------------------------------------------------------------

#
# Header
#
DISTRO_NAME          = "ELiTo"
DISTRO_VERSION_MAJOR = "0.92"
MAINTAINER	     = "SIGMA Chemnitz GmbH <elito@sigma-chemnitz.de>"

DISTRO_VERSION       = "${DISTRO_VERSION_MAJOR}.${SRCDATE}"

IMAGE_DEV_MANAGER   ?= "udev"
IMAGE_INIT_MANAGER  ?= "upstart"
IMAGE_INITSCRIPTS   ?= "${@elito_base_switch(d, 'IMAGE_INIT_MANAGER', \
'upstart','upstart-setup', '')}"

SRC_DIST_LOCAL	    ?= "symlink"
INHERIT += "devshell debian elito packaged-staging packagehistory insane \
	src_distribute_local \
	pkg_metainfo"

IMAGE_FSTYPES ?= "	\
	tar.bz2		\
	${@base_contains('MACHINE_FEATURES','ubifs','ubifs ubi','',d)}	\
	${@base_contains('MACHINE_FEATURES','jffs2','jffs2','',d)}	\
	${@base_contains('MACHINE_FEATURES','arnoldboot','arnoldboot','',d)}	\
"

DISABLE_QEMU	     = true

QA_LOG		     = 1
BBMASK_DISTRO        = "\
(/([^/]*-)?(angstrom|initramfs|mingw|openmoko|opie|sugar|libsdl-qpe)[-_].*)|\
(/((linux(-atm)?)|mamona|maemo|maemo4|maemo-mapper|gpephone|meta|moblin|libqpe|odcctools|ti|shr|sharprom-toolchain)/[^/]*\.bb)|\
(/org.openembedded/recipes/(((upstart)/.*)|(udev/udev.*\.bb)))|\
(?:/preboot/.*\.bb)|\
(?:/kexecboot/.*\.bb)|\
(/(?:${@'|'.join(map(lambda x: \
  '(?:%s)' % re.escape(x), \
  (bb.data.getVar('ELITO_OLD_CRUFT',d,True) or "").split()))})\.bb$)"

ELITO_MIRROR	 ?= "http://www.sigma-chemnitz.de/dl/elito/sources"
ELITO_GIT_REPO	 ?= "git://www.sigma-chemnitz.de/dl/elito/git"
ELITO_GIT_WS	 ?= "${ELITO_ROOTDIR}/workspace"

PROJECT_PASSWD_PATCH ?= ""

MIRRORS_append = "${@'\n'.join([		\
	"ftp://.*/.* ${ELITO_MIRROR}/",		\
	"http://.*/.* ${ELITO_MIRROR}/",	\
])}"

PROJECT_FILE_DATE = "${@get_filedate('PROJECT_TOPDIR', 'conf/project.conf', d)}"
FILESPATH_prepend = "\
${PROJECT_TOPDIR}/files/${PN}/${PV}:${PROJECT_TOPDIR}/files/${PN}:${PROJECT_TOPDIR}/files:\
${ELITO_TOPDIR}/files/${PN}/${PV}:${ELITO_TOPDIR}/files/${PN}:${ELITO_TOPDIR}/files:\
"

DISTRO_CRYPTOPROVIDERS = "openssl:gnutls:*"

SRCPV = "${@bb.fetch.get_srcrev(d)}"

#
# Kernel
#
KERNEL			 = "kernel26"
OLDEST_KERNEL		?= "2.6.25"
KERNEL_UIMAGE		 = 1
MACHINE_TASK_PROVIDER	?= "elito-task-core"

PROJECT_FEATURES	?= "modules usb"
FEED_BASE_URI           ?= "http://www.sigma-chemnitz.de/dl/elito/${DISTRO_VERSION_MAJOR}/ipkg"

ELITO_CRYPTO_PROVIDER	?= "openssl"

#
# Binutils & Compiler
#
PREFERRED_PROVIDER_virtual/arm-${TARGET_OS}-binutils	    = "binutils-cross"

PREFERRED_PROVIDER_virtual/${TARGET_PREFIX}gcc-initial	    = "gcc-cross-initial"
PREFERRED_PROVIDER_virtual/${TARGET_PREFIX}gcc-intermediate = "gcc-cross-intermediate"
PREFERRED_PROVIDER_virtual/${TARGET_PREFIX}gcc		    = "gcc-cross"
PREFERRED_PROVIDER_virtual/${TARGET_PREFIX}g++		    = "gcc-cross"

PREFERRED_PROVIDER_virtual/libsdl        ?= "libsdl-x11"
PREFERRED_PROVIDER_virtual/libqte2       ?= "qte-mt"
PREFERRED_PROVIDER_virtual/libusb0	 ?= "libusb-compat"
PREFERRED_PROVIDER_virtual/db-native	 ?= "db-native"
PREFERRED_PROVIDER_virtual/db		 ?= "db"
PREFERRED_PROVIDER_virtual/libx11	 ?= "libx11"
PREFERRED_PROVIDER_virtual/libgl	 ?= "mesa-xlib"
PREFERRED_PROVIDER_virtual/xserver	 ?= "xserver-kdrive"

PREFERRED_PROVIDER_avahi		 ?= "avahi"
PREFERRED_PROVIDER_gtk+			 ?= "gtk+"

PREFERRED_PROVIDER_virtual/kernel	  = "elito-kernel"

#
# C library
#
PREFERRED_PROVIDER_virtual/libc			       ?= "eglibc"
PREFERRED_PROVIDER_virtual/${TARGET_PREFIX}libc-initial	= "${PREFERRED_PROVIDER_virtual/libc}-initial"
PREFERRED_PROVIDER_virtual/libiconv			= "${PREFERRED_PROVIDER_virtual/libc}"
PREFERRED_PROVIDER_virtual/libintl			= "${PREFERRED_PROVIDER_virtual/libc}"
PREFERRED_PROVIDER_virtual/${TARGET_PREFIX}libc-for-gcc = "${PREFERRED_PROVIDER_virtual/libc}"
PREFERRED_PROVIDER_linux-libc-headers			= "linux-libc-headers"

#
# Bootstrap & Init
#
PREFERRED_PROVIDER_task-bootstrap = "task-bootstrap"

_devfs_init_provider_upstart = "${@elito_base_switch(d, 'IMAGE_DEV_MANAGER', \
	'udev', 'upstart-setup-udev', \
	'busybox-mdev', 'upstart-setup-mdev', \
	'MISSING-upstart-devfs-init')}"

_firmware_loader_provider_upstart = "${@elito_base_switch(d, 'IMAGE_DEV_MANAGER', \
	'udev', 'udev-firmware', \
	'busybox-mdev', 'busybox-mdev', \
	'MISSING-upstart-firmware-loader')}"

DEVFS_INIT_PROVIDER ?= "${@elito_base_switch(d, 'IMAGE_INIT_MANAGER', \
	'upstart', '${_devfs_init_provider_upstart}', \
	'MISSING-devfs-init')}"

FIRMWARE_LOADER_PROVIDER ?= "${@elito_base_switch(d, 'IMAGE_INIT_MANAGER', \
	'upstart', '${_firmware_loader_provider_upstart}', \
	'MISSING-firmware-loader')}"

#
# Misg
#
PREFERRED_PROVIDER_gconf ?= "gconf-dbus"

#
# Preferred versions
#

require conf/distro/include/elito-deps.inc
require conf/distro/include/elito-patches.inc
require conf/distro/include/elito-revs.inc
require conf/distro/include/elito-oldpkg.inc

require conf/distro/include/sane-srcdates.inc
require conf/distro/include/sane-srcrevs.inc

require conf/distro/include/angstrom-ldflags.inc
