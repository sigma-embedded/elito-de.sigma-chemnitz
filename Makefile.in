PYTHON =		python
SED =			sed
SVN =			svn
GIT =			git
WGET =			wget
TAR =			tar
abs_top_srcdir :=	$(abspath @abs_top_srcdir@)
abs_top_builddir :=	$(abspath @abs_top_builddir@)

ELITO_ROOTDIR :=	$(abspath $(abs_top_srcdir)/..)
ELITO_OFFLINE :=	@ELITO_OFFLINE@
CACHE_DIR :=		$(abspath @_CACHE_DIR@)
_CCACHE_DIR :=		$(abspath @_CCACHE_DIR@)
PROJECT_NAME =		@PROJECT_NAME@
QUILT =			@QUILT@
INSTALL =		@INSTALL@
SECWRAP_CMD =		@SECWRAP_CMD@

INSTALL_DATA =		$(INSTALL) -p -m 0644

_FQDN =			$(shell hostname -f)
_DOMAIN =		$(shell hostname -d)

VPATH ?=		$(abs_top_srcdir)

SED_EXPR :=	-e 's!@'ELITO_ROOTDIR'@!$(ELITO_ROOTDIR)!g'	\
		-e 's!@'CACHE_DIR'@!$(CACHE_DIR)!g'		\
		-e 's!@'PYTHON'@!$(PYTHON)!g'			\
		-e 's!@'CCACHE_DIR'@!$(_CCACHE_DIR)!g'		\
		-e 's!@'PROJECT_NAME'@!$(PROJECT_NAME)!g'	\
		-e 's!@'TOP_BUILD_DIR'@!$(abs_top_builddir)!g'	\
		-e 's!@'SECWRAP_CMD'@!$(SECWRAP_CMD)!g'

CHECKSUM_SORTER =	env LC_COLLATE=C $(PYTHON) $(ELITO_ROOTDIR)/org.openembedded/contrib/source-checker/oe-checksums-sorter.py
CHECKSUM_FILE =		$(ELITO_ROOTDIR)/org.openembedded/conf/checksums.ini

BITBAKE_BRANCH =	1.8
BITBAKE_REPO =		git://git.openembedded.org/bitbake.git

_bitbake_srcdir =	$(abs_top_srcdir)/recipes/bitbake/$(BITBAKE_BRANCH)
BITBAKE_REV =		$(shell cat $(_bitbake_srcdir)/rev | $(SED) '1p;d')
BITBAKE_REV_S =		$(shell cat $(_bitbake_srcdir)/rev | $(SED) '2p;d')
BITBAKE_SNAPSHOT =	http://www.sigma-chemnitz.de/dl/elito/sources/bitbake-git.tar

AUTOCONF_FILES =	Makefile		\
			set-env.in		\
			conf/local.conf.in	\
			bitbake			\
			bg-bitbake

CFG_FILES =		Makefile		\
			set-env			\
			conf/local.conf		\
			bitbake			\
			bg-bitbake

TEMPLATE_FILES =	conf/project.conf	\
			.gitignore		\
			recipes/helloworld/helloworld.bb

_template_files =	$(addprefix $(abs_top_builddir)/,$(TEMPLATE_FILES))
_project_task_dir =	$(abs_top_builddir)/recipes/$(PROJECT_NAME)
_project_task_file =	$(_project_task_dir)/task-$(PROJECT_NAME).bb
_project_files_file =	$(_project_task_dir)/files-$(PROJECT_NAME).bb
_samples_dir =		$(abs_top_srcdir)/samples

TARGETS =		elito-image
BITBAKE :=		$(abs_top_builddir)/bitbake
BO ?=
RECIPE ?=

.DEFAULT_GOAL :=	config

-include $(abs_top_builddir)/Makefile.local.$(_FQDN)
-include $(abs_top_builddir)/Makefile.local.$(_DOMAIN)
-include $(abs_top_builddir)/Makefile.local

config:			$(CFG_FILES) $(_template_files) .gitignore bitbake-validate
config:			$(_project_task_file) $(_project_files_file)

init:			bitbake-fetch filesystem-init
prep:			tmp/stamps/.prep.stamp Makefile
image:			prep
			$(BITBAKE) $(TARGETS) $(BO)

build:
			$(BITBAKE) -b "$(RECIPE)" $(BO)

pkg-update pkg-upgrade pkg-install pkg-remove shell: \
			$(ELITO_ROOTDIR)/workspace/Makefile.$(PROJECT_NAME)
			$(SECWRAP_CMD) $(MAKE) -f $< CFG=pkg $@ _secwrap=

$(ELITO_ROOTDIR)/workspace/Makefile.$(PROJECT_NAME):
			@echo "*************" >&2
			@echo "*** Development Makefile not found; please build the 'elito-develcomp' package" >&2
			@echo "*************" >&2
			@false

_bitbake_root =		$(abs_top_builddir)/tmp/staging/.bitbake

filesystem-init:	tmp/stamps/.filesystem.stamp
bitbake-fetch:		tmp/stamps/.bitbake.stamp
bitbake-clean:
			rm -rf tmp/bitbake $(_bitbake_root)
			rm -f tmp/stamps/.bitbake.*
ifeq ($(ELITO_OFFLINE),)
			rm -f $(_bitbake-tarball)
endif

bitbake-validate:
			@f=tmp/stamps/.bitbake.fetch.stamp; \
			test ! -e "$$f" || { \
			v=$$(cat $$f); test x"$$v" = x${BITBAKE_REV}; } || { \
			echo "****"; \
			echo "**** BITBAKE revision mismatch; you have $$v but ${BITBAKE_REV} is expected"; \
			echo "**** please run"; \
			echo "**** cd '$(abspath .)' && make bitbake-clean && make init"; \
			echo "****"; \
			exit 1; \
			} >&2

update-checksum:
			$(if $(FORCE),-)test -e tmp/checksums.ini
			t=$$(mktemp -t elito-crc.XXXXXX) && trap "rm -f $$t" EXIT && $(MAKE) .update-checksum _tmpfile=$$t

.update-checksum:
			$(if $(FORCE),-)cat tmp/checksums.ini >> $(CHECKSUM_FILE)
			$(CHECKSUM_SORTER) $(CHECKSUM_FILE) > $(_tmpfile)
			cat $(_tmpfile) >$(CHECKSUM_FILE)
			rm -f tmp/checksums.ini

find-dups:
			./bitbake -l Collection -d ${TARGETS}

tmp/stamps/.prep.stamp:	tmp/stamps/.bitbake.stamp tmp/stamps/.filesystem.stamp
			$(BITBAKE) stagemanager-native ipkg-utils-native
			@touch $@

tmp/stamps/.filesystem.stamp:
			mkdir -p ${_CCACHE_DIR}
			@touch $@

tmp/stamps/.bitbake.fetch.stamp:	tmp/stamps/.bitbake.gitinit.stamp
			cd tmp/bitbake && { $(GIT) remote update || $(GIT) remote update; }
			cd tmp/bitbake && $(GIT) merge ${BITBAKE_REV}
			@echo $(BITBAKE_REV) > $@

_bitbake-tarball =	$(CACHE_DIR)/bitbake-${BITBAKE_REV_S}.tar.gz

ifeq ($(ELITO_OFFLINE),)
$(_bitbake-tarball):
			mkdir -p $(@D)
			@rm -f $(_bitbake-tarball).tmp
			$(WGET) $(BITBAKE_SNAPSHOT) -O $(_bitbake-tarball).tmp && mv -f $(_bitbake-tarball).tmp $(_bitbake-tarball)
endif

tmp/stamps/.bitbake.gitinit.stamp:	$(_bitbake-tarball)
			@mkdir -p $(dir $@)
			mkdir -p tmp/bitbake
			cd tmp/bitbake && $(GIT) init
			-cd tmp/bitbake && $(GIT) remote add origin ${BITBAKE_REPO}
			-cd tmp/bitbake && $(GIT) config remote.origin.fetch refs/heads/${BITBAKE_BRANCH}:refs/remotes/origin/${BITBAKE_BRANCH}
			-cd tmp/bitbake && $(GIT) config remote.origin.tagopt --no-tags
			-cd tmp/bitbake/.git && $(TAR) xf $(_bitbake-tarball)
			-cd tmp/bitbake/.git/objects/pack && for i in *-elito.pack; do \
				test -e $$i || continue;	\
				echo P $$i >> ../info/packs;	\
			done
			-cd tmp/bitbake && $(GIT) branch ${BITBAKE_BRANCH} ${BITBAKE_REV_S}
			cd tmp/bitbake && { $(GIT) remote update || $(GIT) remote update || :; }
			cd tmp/bitbake && $(GIT) checkout -b elito ${BITBAKE_REV}
			cd tmp/bitbake && $(GIT) gc
			@touch $@

tmp/stamps/.bitbake.patch.stamp:	tmp/stamps/.bitbake.fetch.stamp
ifeq ($(QUILT),)
			cd tmp/bitbake && cat $(_bitbake_srcdir)/*.patch | patch -p0
else
			cd tmp/bitbake && $(QUILT) pop -a || :
			rm -rf tmp/bitbake/patches tmp/bitbake/.pc
			mkdir -p tmp/bitbake/patches
			cd tmp/bitbake && $(QUILT) import -p0 $(_bitbake_srcdir)/*.patch
			cd tmp/bitbake && $(QUILT) push -a -f
endif
			@touch $@

tmp/stamps/.bitbake.stamp:	tmp/stamps/.bitbake.patch.stamp
			cd tmp/bitbake && $(PYTHON) setup.py build
			mkdir -p $(_bitbake_root)/lib
			cd tmp/bitbake && \
			env PYTHONPATH=${PYTHONPATH}:$(if ${PYTHONPATH},:,)$(_bitbake_root)/lib python setup.py install --prefix=$(_bitbake_root) --install-purelib=$(_bitbake_root)/lib -O2
			$(SED) -i -e '/EASY-INSTALL-SCRIPT/aimport os, site; site.addsitedir("$(_bitbake_root)/lib")' $(_bitbake_root)/bin/bitbake
			$(MAKE) bitbake
			@touch $@

.gitignore:
			echo "${CFG_FILES}" | xargs -n1 echo > $@

$(_template_files):$(abs_top_builddir)/%:
			test ! -e $@
			mkdir -p $(dir $@)
			cp --preserve=mode,timestamps ${abs_top_srcdir}/$*.sample $@

$(_project_task_dir)/.stamp:
			mkdir -p '$(dir $@)' '$(dir $@)/rootfs' '$(dir $@)/rootfs/etc'
			$(INSTALL_DATA) $(_samples_dir)/Makefile          $(dir $@)Makefile
			$(INSTALL_DATA) $(_samples_dir)/.gitignore.sample $(dir $@).gitignore
			$(INSTALL_DATA) $(_samples_dir)/securetty         $(dir $@)rootfs/etc/securetty
			touch $@

$(_project_files_file) $(_project_task_file):	$(_project_task_dir)/.stamp
			test -e '$@' || \
			$(SED) -e 's!@'PROJECT_NAME'@!$(PROJECT_NAME)!g' $(abs_top_srcdir)/samples/$(patsubst %-$(PROJECT_NAME).bb,%-project.bb,$(notdir $@)) > '$@'

# make timestamp older to prevent endless runs of this rules; it will
# not be good to do 'touch $@' here because this file is going to be
# edited by the user
			-@test "$<" -ot "$@" || touch --reference "$@" "$<"

%:			%.in
			@-rm -f $@.tmp $@
			$(SED) $(SED_EXPR) $< > $@.tmp
			mv $@.tmp $@
			chmod a-w $@

clean:
			rm -f set-env.in conf/local.conf bitbake

mrproper:		clean
			rm -rf tmp

$(AUTOCONF_FILES): %:	config.status %.in
			$(abspath $<)

config.status:		$(abs_top_srcdir)/configure
			$(abspath $@) --recheck

@ENABLE_MAINTAINER_MODE_TRUE@$(abs_top_srcdir)/configure:	$(abs_top_srcdir)/configure.ac
@ENABLE_MAINTAINER_MODE_TRUE@					cd $(abs_top_srcdir) && autoreconf -i -f
