Index: gst-plugins-good-0.10.31/sys/v4l2/gstv4l2object.c
===================================================================
--- gst-plugins-good-0.10.31.orig/sys/v4l2/gstv4l2object.c
+++ gst-plugins-good-0.10.31/sys/v4l2/gstv4l2object.c
@@ -61,6 +61,13 @@ GST_DEBUG_CATEGORY_EXTERN (v4l2_debug);
 #define DEFAULT_PROP_CHANNEL            NULL
 #define DEFAULT_PROP_FREQUENCY          0
 
+#ifndef V4L2_PIX_FMT_SBGGR12
+#  define V4L2_PIX_FMT_SBGGR12 v4l2_fourcc('B', 'G', '1', '2') /* 12  BGBG.. GRGR.. */
+#  define V4L2_PIX_FMT_SGBRG12 v4l2_fourcc('G', 'B', '1', '2') /* 12  GBGB.. RGRG.. */
+#  define V4L2_PIX_FMT_SGRBG12 v4l2_fourcc('B', 'A', '1', '2') /* 12  GRGR.. BGBG.. */
+#  define V4L2_PIX_FMT_SRGGB12 v4l2_fourcc('R', 'G', '1', '2') /* 12  RGRG.. GBGB.. */
+#endif
+
 enum
 {
   PROP_0,
@@ -827,6 +834,17 @@ static const GstV4L2FormatDesc gst_v4l2_
   /* see http://www.siliconimaging.com/RGB%20Bayer.htm */
 #ifdef V4L2_PIX_FMT_SBGGR8
   {V4L2_PIX_FMT_SBGGR8, TRUE},
+  {V4L2_PIX_FMT_SBGGR10, TRUE},
+  {V4L2_PIX_FMT_SBGGR12, TRUE},
+  {V4L2_PIX_FMT_SGBRG8, TRUE},
+  {V4L2_PIX_FMT_SGBRG10, TRUE},
+  {V4L2_PIX_FMT_SGBRG12, TRUE},
+  {V4L2_PIX_FMT_SGRBG8, TRUE},
+  {V4L2_PIX_FMT_SGRBG10, TRUE},
+  {V4L2_PIX_FMT_SGRBG12, TRUE},
+  {V4L2_PIX_FMT_SRGGB8, TRUE},
+  {V4L2_PIX_FMT_SRGGB10, TRUE},
+  {V4L2_PIX_FMT_SRGGB12, TRUE},
 #endif
 
   /* compressed formats */
@@ -905,6 +923,8 @@ gst_v4l2_object_get_format_from_fourcc (
 #define RGB_BASE_RANK      100
 #define YUV_ODD_BASE_RANK   50
 #define RGB_ODD_BASE_RANK   25
+#define BAYER12_BASE_RANK   19
+#define BAYER10_BASE_RANK   17
 #define BAYER_BASE_RANK     15
 #define S910_BASE_RANK      10
 #define GREY_BASE_RANK       5
@@ -1005,8 +1025,23 @@ gst_v4l2_object_format_get_rank (const s
 
 #ifdef V4L2_PIX_FMT_SBGGR8
     case V4L2_PIX_FMT_SBGGR8:
+    case V4L2_PIX_FMT_SGBRG8:
+    case V4L2_PIX_FMT_SGRBG8:
+    case V4L2_PIX_FMT_SRGGB8:
       rank = BAYER_BASE_RANK;
       break;
+    case V4L2_PIX_FMT_SBGGR10:
+    case V4L2_PIX_FMT_SGBRG10:
+    case V4L2_PIX_FMT_SGRBG10:
+    case V4L2_PIX_FMT_SRGGB10:
+      rank = BAYER10_BASE_RANK;
+      break;
+    case V4L2_PIX_FMT_SBGGR12:
+    case V4L2_PIX_FMT_SGBRG12:
+    case V4L2_PIX_FMT_SGRBG12:
+    case V4L2_PIX_FMT_SRGGB12:
+      rank = BAYER12_BASE_RANK;
+      break;
 #endif
 
 #ifdef V4L2_PIX_FMT_SN9C10X
@@ -1319,7 +1354,19 @@ gst_v4l2_object_v4l2fourcc_to_structure
       break;
 #ifdef V4L2_PIX_FMT_SBGGR8
     case V4L2_PIX_FMT_SBGGR8:
-      structure = gst_structure_new ("video/x-raw-bayer", NULL);
+    case V4L2_PIX_FMT_SBGGR10:
+    case V4L2_PIX_FMT_SBGGR12:
+    case V4L2_PIX_FMT_SGBRG8:
+    case V4L2_PIX_FMT_SGBRG10:
+    case V4L2_PIX_FMT_SGBRG12:
+    case V4L2_PIX_FMT_SGRBG8:
+    case V4L2_PIX_FMT_SGRBG10:
+    case V4L2_PIX_FMT_SGRBG12:
+    case V4L2_PIX_FMT_SRGGB8:
+    case V4L2_PIX_FMT_SRGGB10:
+    case V4L2_PIX_FMT_SRGGB12:
+      structure = gst_structure_new ("video/x-raw-bayer",
+				     "format", GST_TYPE_FOURCC, fourcc, NULL);
       break;
 #endif
 #ifdef V4L2_PIX_FMT_SN9C10X
@@ -1513,7 +1560,7 @@ gst_v4l2_object_get_caps_info (GstV4l2Ob
     fourcc = V4L2_PIX_FMT_JPEG;
 #ifdef V4L2_PIX_FMT_SBGGR8
   } else if (strcmp (mimetype, "video/x-raw-bayer") == 0) {
-    fourcc = V4L2_PIX_FMT_SBGGR8;
+    gst_structure_get_fourcc (structure, "format", &fourcc);
 #endif
 #ifdef V4L2_PIX_FMT_SN9C10X
   } else if (strcmp (mimetype, "video/x-sonix") == 0) {
