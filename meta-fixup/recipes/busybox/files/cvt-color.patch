Index: busybox-1.21.1/miscutils/fbsplash.c
===================================================================
--- busybox-1.21.1.orig/miscutils/fbsplash.c
+++ busybox-1.21.1/miscutils/fbsplash.c
@@ -160,6 +160,15 @@ static void fb_open(const char *strfb_de
 	close(fbfd);
 }
 
+inline static unsigned int fb_reduce_color(uint8_t c, unsigned int num)
+{
+	unsigned int	tmp = c + (1 << (8-num)) / 2;
+
+	if (tmp > 255)
+		tmp = 255;
+
+	return tmp >> (8-num);
+}
 
 /**
  * Return pixel value of the passed RGB color.
@@ -169,25 +178,15 @@ static unsigned fb_pixel_value(unsigned
 {
 	/* We assume that the r,g,b values are <= 255 */
 
-	if (G.bytes_per_pixel == 1) {
-		r = r        & 0xe0; // 3-bit red
-		g = (g >> 3) & 0x1c; // 3-bit green
-		b =  b >> 6;         // 2-bit blue
-		return r + g + b;
-	}
-	if (G.bytes_per_pixel == 2) {
-		// ARM PL110 on Integrator/CP has RGBA5551 bit arrangement.
-		// We want to support bit locations like that.
-		//
-		// First shift out unused bits
-		r = r >> G.red_shift;
-		g = g >> G.green_shift;
-		b = b >> G.blue_shift;
-		// Then shift the remaining bits to their offset
-		return (r << G.scr_var.red.offset) +
-			(g << G.scr_var.green.offset) +
-			(b << G.scr_var.blue.offset);
-	}
+	if (G.bytes_per_pixel == 1)
+		return ((fb_reduce_color(r,3) << 5) |
+			(fb_reduce_color(g,3) << 2) |
+			(fb_reduce_color(b,2) << 0));
+	if (G.bytes_per_pixel == 2)
+		return ((fb_reduce_color(r,G.scr_var.red.length) << G.scr_var.red.offset) |
+			(fb_reduce_color(g,G.scr_var.green.length) << G.scr_var.green.offset) |
+			(fb_reduce_color(b,G.scr_var.blue.length) << G.scr_var.blue.offset));
+
 	// RGB 888
 	return b + (g << 8) + (r << 16);
 }
