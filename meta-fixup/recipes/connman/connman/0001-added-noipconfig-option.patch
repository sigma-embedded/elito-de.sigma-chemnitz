From e58d8b2020f8163321c3378d07506201426e09b2 Mon Sep 17 00:00:00 2001
From: Enrico Scholz <enrico.scholz@sigma-chemnitz.de>
Date: Thu, 8 Nov 2012 13:00:37 +0100
Subject: [PATCH] added '--noipconfig' option

---
 include/inet.h |  1 +
 src/connman.h  |  3 +-
 src/device.c   | 24 ++++++++++++++-
 src/inet.c     | 96 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/main.c     |  5 ++-
 5 Dateien geändert, 126 Zeilen hinzugefügt(+), 3 Zeilen entfernt(-)

Index: git/include/inet.h
===================================================================
--- git.orig/include/inet.h
+++ git/include/inet.h
@@ -82,6 +82,7 @@ int connman_inet_ipv6_get_dest_addr(int
 int connman_inet_check_ipaddress(const char *host);
 connman_bool_t connman_inet_check_hostname(const char *ptr, size_t len);
 connman_bool_t connman_inet_is_ipv6_supported();
+void __connman_inet_disable_index(int index);
 
 #ifdef __cplusplus
 }
Index: git/src/connman.h
===================================================================
--- git.orig/src/connman.h
+++ git/src/connman.h
@@ -471,7 +471,8 @@ void __connman_technology_notify_regdom_
 
 #include <connman/device.h>
 
-int __connman_device_init(const char *device, const char *nodevice);
+int __connman_device_init(const char *device, const char *nodevice,
+			  const char *noipconfig);
 void __connman_device_cleanup(void);
 
 void __connman_device_list(DBusMessageIter *iter, void *user_data);
Index: git/src/device.c
===================================================================
--- git.orig/src/device.c
+++ git/src/device.c
@@ -37,6 +37,7 @@
 static GSList *device_list = NULL;
 static gchar **device_filter = NULL;
 static gchar **nodevice_filter = NULL;
+static gchar **noipconfig_filter = NULL;
 
 enum connman_pending_type {
 	PENDING_NONE	= 0,
@@ -1302,6 +1303,20 @@ done:
 	return device;
 }
 
+static connman_bool_t __connman_device_noipconfig(const char *devname)
+{
+	char **pattern;
+
+	for (pattern = noipconfig_filter; *pattern; pattern++) {
+		if (g_pattern_match_simple(*pattern, devname) == TRUE) {
+			DBG("do not configure device %s", devname);
+			return TRUE;
+		}
+	}
+
+	return FALSE;
+}
+
 connman_bool_t __connman_device_isfiltered(const char *devname)
 {
 	char **pattern;
@@ -1384,6 +1399,9 @@ static void cleanup_devices(void)
 		if (index < 0)
 			continue;
 
+		if (__connman_device_noipconfig(interfaces[i]))
+			__connman_inet_disable_index(index);
+
 		DBG("cleaning up %s index %d", interfaces[i], index);
 
 		connman_inet_ifdown(index);
@@ -1397,7 +1415,8 @@ static void cleanup_devices(void)
 	g_strfreev(interfaces);
 }
 
-int __connman_device_init(const char *device, const char *nodevice)
+int __connman_device_init(const char *device, const char *nodevice,
+			  const char *noipconfig)
 {
 	DBG("");
 
@@ -1407,6 +1426,9 @@ int __connman_device_init(const char *de
 	if (nodevice != NULL)
 		nodevice_filter = g_strsplit(nodevice, ",", -1);
 
+	if (noipconfig != NULL)
+		noipconfig_filter = g_strsplit(noipconfig, ",", -1);
+
 	cleanup_devices();
 
 	return 0;
Index: git/src/inet.c
===================================================================
--- git.orig/src/inet.c
+++ git/src/inet.c
@@ -52,6 +52,45 @@
 	((struct rtattr *) (((uint8_t*) (nmsg)) +	\
 	NLMSG_ALIGN((nmsg)->nlmsg_len)))
 
+static GHashTable	*g_disabled_indices;
+
+static guint g_intptr_hash(gconstpointer p)
+{
+	uintptr_t	v = (uintptr_t)p;
+	return g_int_hash(&v);
+}
+
+static gboolean g_intptr_equal(gconstpointer  p1,
+			       gconstpointer  p2)
+{
+	uintptr_t	v1 = (uintptr_t)p1;
+	uintptr_t	v2 = (uintptr_t)p2;
+
+	return g_int_equal(&v1, &v2);
+}
+
+void __connman_inet_disable_index(int index)
+{
+	connman_info("disabling interface #%d for ipconfig", index);
+
+	if (g_disabled_indices == NULL)
+		g_disabled_indices = g_hash_table_new_full(g_intptr_hash,
+							   g_intptr_equal,
+							   NULL, NULL);
+
+	g_hash_table_add(g_disabled_indices, (void *)index);
+}
+
+static connman_bool_t __connman_inet_is_disabled_index(int index)
+{
+	connman_bool_t	rc;
+
+	rc = (g_disabled_indices != NULL &&
+	      g_hash_table_contains(g_disabled_indices, (void *)index));
+
+	return rc;
+}
+
 int __connman_inet_rtnl_addattr_l(struct nlmsghdr *n, size_t max_length,
 				int type, const void *data, size_t data_length)
 {
@@ -95,6 +134,11 @@ int __connman_inet_modify_address(int cm
 		"prefixlen %hhu broadcast %s", cmd, flags, index, family,
 		address, peer, prefixlen, broadcast);
 
+	if (__connman_inet_is_disabled_index(index)) {
+		connman_info("index disabled; skipping %s", __func__);
+		return 0;
+	}
+
 	if (address == NULL)
 		return -EINVAL;
 
@@ -272,6 +316,11 @@ int connman_inet_ifup(int index)
 	struct ifreq ifr;
 	int sk, err;
 
+	if (__connman_inet_is_disabled_index(index)) {
+		connman_info("index disabled; skipping %s", __func__);
+		return 0;
+	}
+
 	sk = socket(PF_INET, SOCK_DGRAM | SOCK_CLOEXEC, 0);
 	if (sk < 0)
 		return -errno;
@@ -315,6 +364,11 @@ int connman_inet_ifdown(int index)
 	struct sockaddr_in *addr;
 	int sk, err;
 
+	if (__connman_inet_is_disabled_index(index)) {
+		connman_info("index disabled; skipping %s", __func__);
+		return 0;
+	}
+
 	sk = socket(PF_INET, SOCK_DGRAM | SOCK_CLOEXEC, 0);
 	if (sk < 0)
 		return -errno;
@@ -517,6 +571,11 @@ int connman_inet_add_network_route(int i
 	DBG("index %d host %s gateway %s netmask %s", index,
 		host, gateway, netmask);
 
+	if (__connman_inet_is_disabled_index(index)) {
+		connman_info("index disabled; skipping %s", __func__);
+		return 0;
+	}
+
 	sk = socket(PF_INET, SOCK_DGRAM | SOCK_CLOEXEC, 0);
 	if (sk < 0) {
 		err = -errno;
@@ -587,6 +646,11 @@ int connman_inet_del_network_route(int i
 
 	DBG("index %d host %s", index, host);
 
+	if (__connman_inet_is_disabled_index(index)) {
+		connman_info("index disabled; skipping %s", __func__);
+		return 0;
+	}
+
 	sk = socket(PF_INET, SOCK_DGRAM | SOCK_CLOEXEC, 0);
 	if (sk < 0) {
 		err = -errno;
@@ -635,6 +699,11 @@ int connman_inet_del_ipv6_network_route(
 
 	DBG("index %d host %s", index, host);
 
+	if (__connman_inet_is_disabled_index(index)) {
+		connman_info("index disabled; skipping %s", __func__);
+		return 0;
+	}
+
 	if (host == NULL)
 		return -EINVAL;
 
@@ -685,6 +754,11 @@ int connman_inet_add_ipv6_network_route(
 
 	DBG("index %d host %s gateway %s", index, host, gateway);
 
+	if (__connman_inet_is_disabled_index(index)) {
+		connman_info("index disabled; skipping %s", __func__);
+		return 0;
+	}
+
 	if (host == NULL)
 		return -EINVAL;
 
@@ -780,6 +854,11 @@ int connman_inet_clear_ipv6_gateway_addr
 
 	DBG("index %d gateway %s", index, gateway);
 
+	if (__connman_inet_is_disabled_index(index)) {
+		connman_info("index disabled; skipping clear_ipv6_gateway operation");
+		return 0;
+	}
+
 	if (gateway == NULL)
 		return -EINVAL;
 
@@ -823,6 +902,11 @@ int connman_inet_set_gateway_address(int
 
 	DBG("index %d gateway %s", index, gateway);
 
+	if (__connman_inet_is_disabled_index(index)) {
+		connman_info("index disabled; skipping %s", __func__);
+		return 0;
+	}
+
 	sk = socket(PF_INET, SOCK_DGRAM | SOCK_CLOEXEC, 0);
 	if (sk < 0) {
 		err = -errno;
@@ -879,6 +963,11 @@ int connman_inet_set_gateway_interface(i
 	int sk, err = 0;
 
 	DBG("index %d", index);
+ 
+	if (__connman_inet_is_disabled_index(index)) {
+		connman_info("index disabled; skipping %s", __func__);
+		return 0;
+	}
 
 	sk = socket(PF_INET, SOCK_DGRAM | SOCK_CLOEXEC, 0);
 	if (sk < 0) {
@@ -933,6 +1022,11 @@ int connman_inet_set_ipv6_gateway_interf
 
 	DBG("index %d", index);
 
+	if (__connman_inet_is_disabled_index(index)) {
+		connman_info("index disabled; skipping %s", __func__);
+		return 0;
+	}
+
 	sk = socket(PF_INET6, SOCK_DGRAM | SOCK_CLOEXEC, 0);
 	if (sk < 0) {
 		err = -errno;
@@ -985,6 +1079,11 @@ int connman_inet_clear_gateway_address(i
 
 	DBG("index %d gateway %s", index, gateway);
 
+	if (__connman_inet_is_disabled_index(index)) {
+		connman_info("index disabled; skipping %s", __func__);
+		return 0;
+	}
+
 	sk = socket(PF_INET, SOCK_DGRAM | SOCK_CLOEXEC, 0);
 	if (sk < 0) {
 		err = -errno;
@@ -1042,6 +1141,11 @@ int connman_inet_clear_gateway_interface
 
 	DBG("index %d", index);
 
+	if (__connman_inet_is_disabled_index(index)) {
+		connman_info("index disabled; skipping %s", __func__);
+		return 0;
+	}
+
 	sk = socket(PF_INET, SOCK_DGRAM | SOCK_CLOEXEC, 0);
 	if (sk < 0) {
 		err = -errno;
@@ -1095,6 +1199,11 @@ int connman_inet_clear_ipv6_gateway_inte
 
 	DBG("index %d", index);
 
+	if (__connman_inet_is_disabled_index(index)) {
+		connman_info("index disabled; skipping %s", __func__);
+		return 0;
+	}
+
 	sk = socket(PF_INET6, SOCK_DGRAM | SOCK_CLOEXEC, 0);
 	if (sk < 0) {
 		err = -errno;
@@ -1155,6 +1264,11 @@ connman_bool_t connman_inet_compare_subn
 		return -1;
 	host_addr = _host_addr.s_addr;
 
+	if (__connman_inet_is_disabled_index(index)) {
+		connman_info("index disabled; skipping %s", __func__);
+		return 0;
+	}
+
 	sk = socket(PF_INET, SOCK_DGRAM | SOCK_CLOEXEC, 0);
 	if (sk < 0)
 		return FALSE;
@@ -1255,6 +1369,11 @@ int connman_inet_set_mtu(int index, int
 	struct ifreq ifr;
 	int sk, err;
 
+	if (__connman_inet_is_disabled_index(index)) {
+		connman_info("index disabled; skipping %s", __func__);
+		return 0;
+	}
+
 	sk = socket(AF_INET, SOCK_DGRAM | SOCK_CLOEXEC, 0);
 	if (sk < 0)
 		return sk;
@@ -2377,6 +2496,11 @@ connman_bool_t connman_inet_is_ipv6_supp
 {
 	int sk;
 
+	if (__connman_inet_is_disabled_index(index)) {
+		connman_info("index disabled; skipping %s", __func__);
+		return 0;
+	}
+
 	sk = socket(PF_INET6, SOCK_DGRAM | SOCK_CLOEXEC, 0);
 	if (sk < 0)
 		return FALSE;
Index: git/src/main.c
===================================================================
--- git.orig/src/main.c
+++ git/src/main.c
@@ -426,6 +426,7 @@ static gchar *option_debug = NULL;
 static gchar *option_device = NULL;
 static gchar *option_plugin = NULL;
 static gchar *option_nodevice = NULL;
+static gchar *option_noipconfig = NULL;
 static gchar *option_noplugin = NULL;
 static gchar *option_wifi = NULL;
 static gboolean option_detach = TRUE;
@@ -455,6 +456,8 @@ static GOptionEntry options[] = {
 			"Specify networking device or interface", "DEV" },
 	{ "nodevice", 'I', 0, G_OPTION_ARG_STRING, &option_nodevice,
 			"Specify networking interface to ignore", "DEV" },
+	{ "noipconfig", 0, 0, G_OPTION_ARG_STRING, &option_noipconfig,
+			"Specify networking interface which shall not be configured", "DEV" },
 	{ "plugin", 'p', 0, G_OPTION_ARG_STRING, &option_plugin,
 				"Specify plugins to load", "NAME,..." },
 	{ "noplugin", 'P', 0, G_OPTION_ARG_STRING, &option_noplugin,
@@ -629,7 +632,7 @@ int main(int argc, char *argv[])
 	__connman_service_init();
 	__connman_provider_init();
 	__connman_network_init();
-	__connman_device_init(option_device, option_nodevice);
+	__connman_device_init(option_device, option_nodevice, option_noipconfig);
 
 	__connman_ippool_init();
 	__connman_iptables_init();
