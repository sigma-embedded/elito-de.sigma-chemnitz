#-----------------------------------------------------------------------------
#@TYPE: Distribution
#@NAME: Minimal
#@DESCRIPTION: Embedded Linux Distribution Configuration (minimal)
#
#@COMMENT: This distribution configuration serves as a starting point for
#@COMMENT: the integration of new target platforms, machines, or distributions.
#@COMMENT: It bases on conservative settings and should always be buildable.
#-----------------------------------------------------------------------------

#
# Header
#
DISTRO_NAME          = "ELiTo"
DISTRO_VERSION_MAJOR = "0.93"
MAINTAINER	     = "SIGMA Chemnitz GmbH <elito@sigma-chemnitz.de>"

DISTRO_VERSION       = "${DISTRO_VERSION_MAJOR}.${SRCDATE}"
DISTRO_TYPE	    := "${@['debug','release'][os.environ.get('W','tmp').startswith('release-')]}"
COMMERCIAL_LICENSE  ?= ""

IMAGE_DEV_MANAGER   ?= "udev"
IMAGE_INIT_MANAGER  ?= "systemd"
IMAGE_INITSCRIPTS   ?= "${@elito_base_switch(d, 'IMAGE_INIT_MANAGER', \
'upstart','upstart-setup', \
'systemd','elito-systemd-conf', \
'')}"

BB_VERBOSE_LOGS      = "1"

DISTRO_LIBC         ?= "eglibc"
DISTRO_ROOTPASSWD  ??= ""

SRC_DIST_LOCAL	    ?= "symlink"
INHERIT_DISTRO       = "\
	debian devshell sstate license \
	elito"

IMAGE_FSTYPES ?= "	\
	tar.bz2		\
	${@base_contains('MACHINE_FEATURES','ubifs','ubifs ubi','',d)}	\
	${@base_contains('MACHINE_FEATURES','jffs2','jffs2','',d)}	\
	${@base_contains('MACHINE_FEATURES','arnoldboot','arnoldboot','',d)}	\
"

EXTRA_IMAGE_FEATURES ?= "\
  ${@['','debug-tweaks']['${DISTRO_TYPE}' == 'debug']} \
  ssh-server-dropbear package-management \
  ${@base_contains('DISTRO_FEATURES', 'screen', 'splash', '', d)} \
"
USER_CLASSES	     ?= "rm_work rm_old_work image-prelink"
IMAGE_KEEPROOTFS     ?= "1"

BB_LOCALCOUNT_OVERRIDE = ""
DISABLE_QEMU	     = "true"

QA_LOG		     = "1"
BBMASK_DISTRO     = "(/qemu/qemu.*)|(/external-csl-toolchain.*)|(/linux-yocto_.*)${BBMASK_DISTRO-no-gnome}${BBMASK_DISTRO-no-efl}${BBMASK_DISTRO-no-multimedia}"

BBMASK_DISTRO-no-gnome = "${@base_contains('BBFILE_COLLECTIONS','gnome-layer','','|(/meta-gnome/.*)', d)}"
BBMASK_DISTRO-no-efl = "${@base_contains('BBFILE_COLLECTIONS','elf-layer','','|(/meta-efl/.*)', d)}"
BBMASK_DISTRO-no-multimedia = "${@base_contains('BBFILE_COLLECTIONS','multimedia-layer','','|(/meta-multimedia/.*)', d)}"

ELITO_MIRROR	 ?= "http://www.sigma-chemnitz.de/dl/elito/sources"
ELITO_GIT_REPO	 ?= "git://git.sigma-chemnitz.de:4815"
ELITO_GIT_WS	 ?= "${ELITO_WORKSPACE_DIR}"
ELITO_CRT	??= ""

export ELITO_CRT

PROJECT_PASSWD_PATCH ?= ""
PROJECT_REPOSITORIES ?= ""

PREMIRRORS_prepend = "${PROJECT_REPOSITORIES} \
 ${@'\n'.join([ \
	".*://.*/.*	file://${DL_DIR}/../local/", \
	"" \
])}"

MIRRORS_prepend = "${PROJECT_REPOSITORIES} \
 ${@'\n'.join([		\
	"git://.*/.*	${ELITO_MIRROR}/",	\
	"" \
])}"

MIRRORS_append = "${@'\n'.join([		\
	"ftp://.*/.*	${ELITO_MIRROR}/",	\
	"http://.*/.*	${ELITO_MIRROR}/",	\
	"svn://.*/.*	${ELITO_MIRROR}/",	\
	"cvs://.*/.*	${ELITO_MIRROR}/",	\
	"hg://.*/.*	${ELITO_MIRROR}/",	\
	"" \
])}"

PROJECT_FILE_DATE = "${@get_filedate('${PROJECT_TOPDIR}/conf/project.conf')}"
PROJECT_CONF_DATE = "${@max(map(lambda x: \
	(get_filedate(x) or 0), \
	['${PROJECT_TOPDIR}/conf',] + \
	elito_glob('${PROJECT_TOPDIR}/conf/*.conf')))}"

DISTRO_CRYPTOPROVIDERS = "openssl:gnutls:*"

export CCACHE = "${@bb.which(d.getVar('PATH', True), 'ccache') and 'ccache '}"
export CCACHE_DIR = "${TMPDIR}/cache/ccache"

SSTATE_DIR = "${TMPDIR}/sstate-cache"

#
# Kernel
#
KERNEL			 = "kernel26"
OLDEST_KERNEL		?= "2.6.32"
KERNEL_UIMAGE		 = "1"
KERNEL_BOOT_VARIANT	??= "${@'${KERNEL_IMAGETYPE}'.lower()}"
MACHINE_TASK_PROVIDER	?= "elito-task-core"

KERNEL_CONSOLE		?=  "${@(lambda x: '%s,%sn8' % (x[1],x[0]))('${SERIAL_CONSOLE}'.split())}"

TCLIBC			 = "${DISTRO_LIBC}"
TCLIBCAPPEND		:= ''
PROJECT_FEATURES	?= "modules usb eabi"
NO_PROJECT_FEATURES	?= "bluetooth irda"
FEED_BASE_URI           ?= "http://${TFTP_SERVER}:8888/${PROJECT_NAME}/ipk"

DISTRO_FEATURES		 = "${DISTRO_FEATURES_LIBC}"
DISTRO_FEATURES_BACKFILL_elito = "\
  largefile nfsroot modules ld-is-gold ${PROJECT_FEATURES} \
  ${@base_contains('PROJECT_FEATURES', 'alsa', 'sound', '', d)} \
  ${@base_contains('PROJECT_FEATURES', 'directfb', 'screen', '', d)} \
  ${@base_contains('PROJECT_FEATURES', 'fb', 'screen', '', d)} \
  ${@base_contains('PROJECT_FEATURES', 'mmc', 'ext2 vfat', '', d)} \
  ${@base_contains('PROJECT_FEATURES', 'touchscreen', 'screen', '', d)} \
  ${@base_contains('PROJECT_FEATURES', 'ubifs', 'mtd', '', d)} \
  ${@base_contains('PROJECT_FEATURES', 'jffs2', 'mtd', '', d)} \
  ${@base_contains('PROJECT_FEATURES', 'usbclient', 'usb usbgadget', '', d)} \
  ${@base_contains('PROJECT_FEATURES', 'usbgadget', 'usb usbclient', '', d)} \
  ${@base_contains('PROJECT_FEATURES', 'usbhost', 'ext2 vfat', '', d)} \
  ${@base_contains('PROJECT_FEATURES', 'usbhost', 'usb', '', d)} \
  ${@base_contains('PROJECT_FEATURES', 'x11', 'screen', '', d)} \
"
DISTRO_FEATURES_BACKFILL_CONSIDERED = "${NO_PROJECT_FEATURES}"

DISTRO_DERIVED_FEATURES  = "\
  ${@base_contains('PROJECT_FEATURES', 'x11', 'gtk-supported', '', d)} \
  ${@base_contains('PROJECT_FEATURES', 'directfb', 'gtk-supported', '', d)} \
"

ELITO_CRYPTO_PROVIDER	?= "openssl"

DISTRO_XORG_CONFIG_MANAGER ?= "udev"
BUILD_OPTIMIZATION	+= "-pipe"

PROJECT_EXTRA_RDEPENDS	?= "task-${PROJECT_NAME}"
IMAGE_LINGUAS           ?= "de-de en-gb en-us fr-fr"
DEFAULT_TIMEZONE	?= "Universal"

ELITO_COMMON_MACHINE_CONFIGURATION ??= "conf/disto/include/elito-common_none.inc"

#
# Binutils & Compiler
#
PREFERRED_PROVIDER_virtual/libsdl        ?= "libsdl-x11"
PREFERRED_PROVIDER_virtual/libqte2       ?= "qte-mt"
PREFERRED_PROVIDER_virtual/libusb0	 ?= "libusb-compat"
PREFERRED_PROVIDER_virtual/db-native	 ?= "db-native"
PREFERRED_PROVIDER_virtual/db		 ?= "db"
PREFERRED_PROVIDER_virtual/libx11	 ?= "libx11"
PREFERRED_PROVIDER_virtual/libgl	 ?= "mesa-xlib"
PREFERRED_PROVIDER_virtual/xserver	 ?= "xserver-kdrive"

PREFERRED_PROVIDER_avahi		 ?= "avahi"
PREFERRED_PROVIDER_gtk+			 ?= "gtk+"
PREFERRED_PROVIDER_lzo			 ?= "lzo2"
PREFERRED_PROVIDER_lzo-native		 ?= "lzo2-native"
PREFERRED_PROVIDER_u-boot		 ?= "u-boot"

PREFERRED_PROVIDER_virtual/kernel	  = "elito-kernel"

#
# C library
#
PREFERRED_PROVIDER_linux-libc-headers			= "linux-libc-headers"

#
# Bootstrap & Init
#
PREFERRED_PROVIDER_task-bootstrap = "task-bootstrap"

_devfs_init_provider_upstart = "${@elito_base_switch(d, 'IMAGE_DEV_MANAGER', \
	'udev', 'upstart-setup-udev', \
	'busybox-mdev', 'upstart-setup-mdev', \
	'MISSING-upstart-devfs-init')}"

DEVFS_INIT_PROVIDER ?= "${@elito_base_switch(d, 'IMAGE_INIT_MANAGER', \
	'upstart', '${_devfs_init_provider_upstart}', \
	'systemd', '', \
	'MISSING-devfs-init')}"

#
# Misc
#
PREFERRED_PROVIDER_gconf ?= "gconf-dbus"

TARGET_CPU_pn-gcc-crosssdk-initial ?= ""
TARGET_CPU_pn-gcc-crosssdk-intermediate ?= ""
TARGET_CPU_pn-gcc-crosssdk ?= ""

TARGET_ABI_pn-gcc-crosssdk-initial ?= ""
TARGET_ABI_pn-gcc-crosssdk-intermediate ?= ""
TARGET_ABI_pn-gcc-crosssdk ?= ""

#
# Preferred versions
#

BUILD_VENDOR = "-oe"
TARGET_VENDOR = ""

NO32LIBS ?= "1"

require conf/distro/include/elito-signature_${ELITO_SIGNATURE_HANDLER}.inc
include conf/distro/include/elito-initmanager_${IMAGE_INIT_MANAGER}.inc
require conf/distro/include/elito-deps.inc
require conf/distro/include/elito-patches.inc
require conf/distro/include/elito-revs.inc
