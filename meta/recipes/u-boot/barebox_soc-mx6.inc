inherit elito-dtree-base elito-machdata

DEPENDS += "libxslt-native elito-devicetree"

FILES_${PN}-dev += "${datadir}/mach-${MACHINE}/*.dcd"

def get_start_fn_name(variant):
    tmp = map(lambda x: x.replace('-', '_'), variant.split(':'))
    return tmp[0] + '_' + tmp[2]

def get_flash_hdr_name(variant):
    tmp = variant.split(':')
    return tmp[0] + '-' + tmp[2]

def get_dcd_names(d):
    variants = oe.data.typed_value('MACHINE_VARIANTS', d)
    res = []
    for v in variants:
        res.append('flash-header-%s.dcd' % get_flash_hdr_name(v))

    return ' '.join(res)

_pblxopt[vardeps] += "MACHINE_VARIANTS get_start_fn_name"
_pblxopt="${@' '.join(map(lambda x:\
  'start_%s' % get_start_fn_name(x), \
  oe.data.typed_value('MACHINE_VARIANTS', d)))}"

_cfgopt[vardeps] += "MACHINE_VARIANTS get_start_fn_name get_flash_hdr_name"
_cfgopt="${@' '.join(map(lambda x:\
  elito_quote('CFG_start_%s.pblx.imximg=$(board)/${UBOOT_BOARD}/flash-header-%s.imxcfg') % \
  (get_start_fn_name(x), get_flash_hdr_name(x)), \
  oe.data.typed_value('MACHINE_VARIANTS', d)))}"

_fileopt[vardeps] += "MACHINE_VARIANTS get_start_fn_name get_flash_hdr_name"
_fileopt="${@' '.join(map(lambda x:\
  'FILE_barebox-%s.img=start_%s.pblx.imximg' % \
  (get_flash_hdr_name(x), get_start_fn_name(x)), \
  oe.data.typed_value('MACHINE_VARIANTS', d)))}"

_imageopt[vardeps] += "MACHINE_VARIANTS get_flash_hdr_name"
_imageopt="${@' '.join(map(lambda x:\
  'barebox-%s.img' % get_flash_hdr_name(x), \
  oe.data.typed_value('MACHINE_VARIANTS', d)))}"

_dtbopts[vardeps] += "MACHINE_VARIANTS"
_dtbopts="${@' '.join(map(lambda x:\
  '%s.dtb.o' % x.split(':')[0], \
  oe.data.typed_value('MACHINE_VARIANTS', d)))}"

BAREBOX_OEMAKE_OPTS="\
  pblx-y='${_pblxopt}' \
  cmdline_extra_images='${_imageopt}' \
  cmdline_extra_pbl-dtb='${_dtbopts}' \
  ${_cfgopt} ${_fileopt} \
"

EXTRA_OEMAKE += "\
  BAREBOX_DTB_EXTRA_PATH='${STAGING_MACHDATADIR}' \
  ${BAREBOX_OEMAKE_OPTS} \
"

### Passing of 'pblx-y' and other variables with '-' or '.' to submakes
### is broken with GNU make 4.0 and 4.1 else
EXTRA_OEMAKE_remove = '-e'
EXTRA_OEMAKE_remove = 'MAKEFLAGS='

_BAREBOX_DCD_FILES[vardeps] += "MACHINE_VARIANTS"
_BAREBOX_DCD_FILES = "${@get_dcd_names(d)}"

BAREBOX_DCD_FILES ?= "${_BAREBOX_DCD_FILES}"

do_register_dcd() {
    cd ${S}/arch/arm/boards/${UBOOT_BOARD}
    sed -i '/##### autogenerated lines/,$d' Makefile
    cat <<"EOF" >> Makefile
##### autogenerated lines
extra-y += ${BAREBOX_DCD_FILES}
EOF
    cd -
}
addtask do_register_dcd after do_configure before do_compile

do_install() {
    # some sanity checks to verify environment
    test -n "${UBOOT_BOARD}"
    test -d arch/arm/boards/${UBOOT_BOARD}

    install -d -m 0755 ${D}/${datadir}/mach-${MACHINE}

    for i in arch/arm/boards/${UBOOT_BOARD}/*.dcd; do
        install -p -m 0644 "$i" ${D}/${datadir}/mach-${MACHINE}/
    done
}

deploy_file() {
    dst="${1%.*}-$2.${1##.*}"
    install -D -p -m 0444 "$1" "${DEPLOYDIR}/$dst"
    rm -f "${DEPLOYDIR}/$1"
    ln -s "$dst" "${DEPLOYDIR}/$1"
}

do_deploy () {
    gitrev=`git ls-remote . HEAD | sed '1s/^\(........\).*/\1/p;d'`

    deploy_file barebox "${gitrev}"

    cd images
    for i in barebox-*.img; do
	deploy_file "$i" "${gitrev}"
    done
    cd -
}
