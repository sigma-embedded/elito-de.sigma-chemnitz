From 54d043f80c7d61370b2f9ca33f51ff1410175eb3 Mon Sep 17 00:00:00 2001
From: Enrico Scholz <enrico.scholz@sigma-chemnitz.de>
Date: Mon, 26 Oct 2015 19:33:15 +0100
Subject: [PATCH] fetcher: allow git+<protocol>: syntax

Specifying an alternative git respository with a different access
protocol is very difficulty atm because the protocol is part of the
URI parameters which are at end the end of the URI.

E.g. when having

| MY_GIT_REPO = "git://example.com"
| SRC_URI = "${MY_GIT_REPO}/foo.git;protocol=ssh"

and somebody wants to access this over https (e.g. because of firewall
constraints) or over ssh (e.g. because it contains a private branch),
this requires modification of 'SRC_URI'.

With this patch, this can be done by

| MY_GIT_REPO = "git+https://example.com"

or

| MY_GIT_REPO = "git+ssh://private.example.com"

Signed-off-by: Enrico Scholz <enrico.scholz@sigma-chemnitz.de>
---
 lib/bb/fetch2/__init__.py | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/lib/bb/fetch2/__init__.py b/lib/bb/fetch2/__init__.py
index 54222f4..2591016 100644
--- a/lib/bb/fetch2/__init__.py
+++ b/lib/bb/fetch2/__init__.py
@@ -236,6 +236,11 @@ class URI(object):
         urlp = urlparse.urlparse(uri)
         self.scheme = urlp.scheme
 
+        protocol = None
+        if self.scheme.startswith('git+'):
+            protocol = self.scheme[4:]
+            self.scheme = self.scheme[:3]
+
         reparse = 0
 
         # Coerce urlparse to make URI scheme use netloc
@@ -274,6 +279,9 @@ class URI(object):
         if urlp.query:
             self.query = self._param_str_split(urlp.query, "&")
 
+        if protocol:
+            self.params['protocol'] = protocol
+
     def __str__(self):
         userinfo = self.userinfo
         if userinfo:
@@ -373,6 +381,11 @@ def decodeurl(url):
     user = m.group('user')
     parm = m.group('parm')
 
+    protocol = None
+    if type.startswith('git+'):
+        protocol = type[4:]
+        type = type[:3]
+
     locidx = location.find('/')
     if locidx != -1 and type.lower() != 'file':
         host = location[:locidx]
@@ -398,6 +411,9 @@ def decodeurl(url):
                 s1, s2 = s.split('=')
                 p[s1] = s2
 
+    if protocol:
+        p['protocol'] = protocol
+
     return type, host, urllib.unquote(path), user, pswd, p
 
 def encodeurl(decoded):
-- 
2.4.3

