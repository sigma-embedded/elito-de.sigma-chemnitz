From c2005a5818f43d6153ddfc0e21ec6cf1dafbfbd3 Mon Sep 17 00:00:00 2001
From: Enrico Scholz <enrico.scholz@sigma-chemnitz.de>
Date: Mon, 21 May 2012 17:15:44 +0200
Subject: [PATCH 15/17] siggen: dump sigdata content

---
 lib/bb/siggen.py | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/lib/bb/siggen.py b/lib/bb/siggen.py
index ff70d4f..d046321 100644
--- a/lib/bb/siggen.py
+++ b/lib/bb/siggen.py
@@ -66,6 +66,7 @@ class SignatureGeneratorBasic(SignatureGenerator):
     def __init__(self, data):
         self.basehash = {}
         self.taskhash = {}
+        self.taskhash_cont = {}
         self.taskdeps = {}
         self.runtaskdeps = {}
         self.file_checksum_values = {}
@@ -173,6 +174,7 @@ class SignatureGeneratorBasic(SignatureGenerator):
     def get_taskhash(self, fn, task, deps, dataCache):
         k = fn + "." + task
         data = dataCache.basetaskhash[k]
+        cont = [('__base', str(data))]
         self.runtaskdeps[k] = []
         self.file_checksum_values[k] = {}
         recipename = dataCache.pkg_fn[fn]
@@ -183,6 +185,7 @@ class SignatureGeneratorBasic(SignatureGenerator):
             if dep not in self.taskhash:
                 bb.fatal("%s is not in taskhash, caller isn't calling in dependency order?", dep)
             data = data + self.taskhash[dep]
+            cont.append([str(dep), self.taskhash[dep]])
             self.runtaskdeps[k].append(dep)
 
         if task in dataCache.file_checksums[fn]:
@@ -190,13 +193,16 @@ class SignatureGeneratorBasic(SignatureGenerator):
             for (f,cs) in checksums:
                 self.file_checksum_values[k][f] = cs
                 data = data + cs
+                cont.append([str(f), cs])
 
         taint = self.read_taint(fn, task, dataCache.stamp[fn])
         if taint:
             data = data + taint
+            cont.append(['TAINT', taint])
 
         h = hashlib.md5(data).hexdigest()
         self.taskhash[k] = h
+        self.taskhash_cont[k] = cont
         #d.setVar("BB_TASKHASH_task-%s" % task, taskhash[task])
         return h
 
@@ -255,6 +261,17 @@ class SignatureGeneratorBasic(SignatureGenerator):
                 pass
             raise err
 
+        fd, tmpfile = tempfile.mkstemp(dir=os.path.dirname(sigfile),
+                                       prefix="sigtask.txt.")
+        try:
+            with os.fdopen(fd, "wb") as stream:
+                stream.write(''.join(map(lambda x: '%s: %s\n' %
+                                         (x[0],x[1]), self.taskhash_cont[k])))
+            os.chmod(tmpfile, 0664)
+            os.rename(tmpfile, sigfile.replace('.sigdata.', '.sigtext.').replace('.sigbasedata.', '.sigbasetext.'))
+        finally:
+            bb.utils.remove(tmpfile)
+
     def dump_sigs(self, dataCache):
         for fn in self.taskdeps:
             for task in self.taskdeps[fn]:
-- 
1.7.11.4

